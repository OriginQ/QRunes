==========================
第3章 QRunes表达式与运算符
==========================

    

本章节及后续的第四章来详细叙述下QRunes中的表达式和语句，因为当前的量子编程涉及三个部分：经典计算机模块，测控系统模块和量子芯片模块，故这种混合（量子、经典、辅助类型）程序各自分别运行在其对应的硬件模块上，他们的编译和运行方式也将会不同。

3.1 表达式
-------------

**在QRunes中，表达式由运算符和操作数组成，主要的作用是：** 

- 计算辅助类型操作数的值。
- 指定函数。


**操作数可以是常量或者一个数据对象。比如：** 

- 常量：3.14,1  
- 数据对象：标识符,表达式本身

3.2 表达式的类型介绍：
--------------------------

3.2.1 主表达式 
*******************************

**它是构造其他表达式的基本块。** 

语法构成：

::

 主表达式：标识符 | 常量 | 括号表达式  
 primary_expression: idetifier | constant |parenthesis_expression  
 例如：qubit_s1,3.1415,(c1 + c2)     
 注：支持量子类型，经典类型，辅助类型

3.2.2 括号表达式  
*******************************

语法构成：

::

 parenthesis_expression：（ expression ）  
 它表示在不更改括号封闭里面的表达式类型或值的情况下来构造表达式的分组方式。  
 例如:  （ 2 + 3 ）/5 与 2 + 3 / 5   
 注：支持量子类型，经典类型，辅助类型

3.2.3 后缀表达式与其运算符  
*******************************

**它是后面跟运算符的主表达式。**  

==================      ========      ===========
后缀运算符                  示例         支持类型  
==================      ========      ===========
下标运算符                  [ ]          Q A C
函数调用运算符              （）          Q A C
对象成员访问运算符           .            Q A C
后缀递增运算符               ++           A
后缀递减法运算符           \- \-           A
==================      ========      ===========

3.2.4 一元表达式与其运算符  
*******************************

==========    ================   ========   ===========
一元运算符     含义                 示例       支持类型 
==========    ================   ========   ===========
~              取反运算符           ~x         A
!              逻辑非运算符         !x         A C
++             一元递增运算符       x++        A
\- \-          一元递减运算符       x- \-      A
==========    ================   ========   ===========


3.2.5 二元表达式与其运算符
*******************************


- 基本的赋值运算符是“=”。他的优先级别低于其他的运算符，所以对该运算符往往最后读取。

==============          =============================================================    =======================      ======================
赋值运算符                   含义                                                              示例                         支持类型 
==============          =============================================================    =======================      ======================
=                         将右操作数的值赋给左操作数                                         x=y;将x的值赋为y                     A C
+=                        加后赋值                                                         x+=y;即x=x+y                         A C
-=                        减后赋值                                                         x-=y;即x=x-y                         A C
*=                        乘后赋值                                                         x*=y;即x=x*y                         A C
/=                        除后赋值                                                         x/=y;即x=x/y                         A C
%=                        取余后赋值                                                       x%=y;即x=x%y                         A C
&=                        按位与后赋值                                                     x&=y;即x=x%y                         A C
\|=                       按位或后赋值                                                     x\|=y;即x=x\|y                       A C
==============          =============================================================    =======================      ======================


- 算术运算符即算术运算符号。是完成基本的算术运算 (arithmetic operators) 符号，就是用来处理四则运算的符号。

==============          =============================================================    =======================      ======================
算术运算符                   含义                                                              示例                         支持类型 
==============          =============================================================    =======================      ======================
\+                         两个操作数相加                                                       x + y                     A C
\-                         第一个操作数减去第二个操作数                                          x - y                     A C
\*                         两个操作数相乘                                                       x * y                     A C
\/                         第一个操作数除第二个操作数                                            x / y                     A C
%                          第一个操作数整除第二个操作数之后的余数                                 x % y                     A
^                          第一个操作数的第二个操作数幂次方                                       x^y                       A
==============          =============================================================    =======================      ======================


- 关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。关系运算符的值只能是0或1。关系运算符的值为真时，结果值都为1。关系运算符的值为假时，结果值都为0。

==============          =============================================================    =======================      ======================
关系运算符                   含义                                                              示例                         支持类型 
==============          =============================================================    =======================      ======================
==                        判断两个操作数是否相等,相等则返回真值                                  x == y                         A C
!=                        判断两个数是否相等，不相等则返回真值                                   x != y                         A C
>                         判断左操作数是否大于右操作数，大于则返回真值                            x > y                           A C
<                         判断左操作数是否小于右操作数，小于则返回真值                            x < y                           A C
>=                        判断左操作数是否大于等于右操作数，大于等于则返回真值                     x > y                         A C
<=                        判断左操作数是否小于等于右操作数，小于等于则返回真值                     x <= y                         A C
==============          =============================================================    =======================      ======================


- 在形式逻辑中，逻辑运算符或逻辑联结词把语句连接成更复杂的复杂语句

==============          =============================================================    =======================      ======================
逻辑运算符                   含义                                                              示例                         支持类型 
==============          =============================================================    =======================      ======================
&&                        如果两个操作数都非零，则返回真值                                       x && y                         A C
\|\|                      如果两个操作数任意一个非零，则返回真值                                  x \|\| y                      A C
!                         如果操作数为零                                                        !x                             A C
==============          =============================================================    =======================      ======================


- 位操作是程序设计中对位模式按位或二进制数的一元和二元操作。在许多古老的微处理器上， 位运算比加减运算略快， 通常位运算比乘除法运算要快很多。在现代架构中， 情况并非如此：位运算的运算速度通常与加法运算相同（仍然快于乘法运算）。

==============          =============================================================    =======================      ======================
位运算符                   含义                                                              示例                         支持类型 
==============          =============================================================    =======================      ======================
&                         按位与                                                               x & y                         A
\|                        按位或                                                               x \| y                        A
^                         异或运算符                                                           x ^ y                          A
<<                        二进制左移运算符                                                      x << y                               A
>>                        二进制右移运算符                                                      x >> y                                A
==============          =============================================================    =======================      ======================

       
3.2.6 三元表达式与运算符 
*******************************


===========   ===================================        ====================       ===============         ===============
三元运算符          含义                                      示例                    类别                      支持类型   
===========   ===================================        ====================       ===============         ===============
？：           根据计算的值结果选择true还是false             a > b ? a : b             三元运算符                A
===========   ===================================        ====================       ===============         ===============

3.2.7 逗号运算符
*******************************

::

 逗号运算符的作用是将几个表达式放在一起，起到分割表达式的作用。  
 注：支持 A Q C

3.2.8 常量表达式  
*******************************

::

 常量表达式是在编译时计算而不是在运行时计算。
 注：支持 A

3.2.9 lambda表达式  
*********************

| 匿名函数lambda：是指一类无需定义标识符（函数名）的函数或子程序。

| lambda 函数可以接收任意多个参数 (包括可选参数) 并且返回单个表达式的值。

| lambda匿名函数的格式：冒号前是参数，可以有多个，用逗号隔开，冒号右边的为表达式或是语法块。其实lambda返回值是一个函数的地址，也就是函数对象。


示例：

::

    circuit<vector<qubit>,qubit> generate_two_qubit_oracle(vector<bool> oracle_function){
        return lambda (vector<qubit> qlist,qubit qubit2):{
            if (oracle_function[0] == false &&
                oracle_function[1] == true){
                // f(x) = x;
                CNOT(qlist[0], qubit2);
            }else if (oracle_function[0] == true &&
                oracle_function[1] == false){
                // f(x) = x + 1;
                CNOT(qlist[0], qubit2);
                X(qubit2);
            }else if (oracle_function[0] == true &&
                oracle_function[1] == true){
                // f(x) = 1
                X(qubit2);
            }else{
                // f(x) = 0, do nothing
            }
        };
    }

    Deutsch_Jozsa_algorithm(vector<qubit> qlist,qubit qubit2,vector<cbit> clist,circuit<vector<qubit>,qubit> oracle){
        X(qubit2);
        apply_QGate(qlist, H);
        H(qubit2);
        oracle(qlist,qubit2);
        apply_QGate(qlist, H);
        measure_all(qlist,clist);
    }

| 注意：lambda表达式包含的语法块或表达式不能超过一个


3.2.10 运算符优先级
***********************

====================================     ================================
运算符                                      结合性
====================================     ================================
[ ] . ( )(方法调用)	                        从左向右
! ~ ++ \- \- +(一元运算)-(一元运算)	         从右向左
\* / %	                                   从左向右
\+\-	                                   从左向右
<< >> 	                                   从左向右
< <= > >=	                               从左向右
== !=	                                   从左向右
&&  ||	                                   从左向右
?:	                                       从右向左
= += -= *= /= %=                           从右向左
====================================     ================================


 